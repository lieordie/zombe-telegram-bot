import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.enums import ParseMode

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (–¥–ª—è Timeweb –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
BOT_TOKEN = os.getenv('BOT_TOKEN', '8196826964:AAEvCpkPFrwwoFoeNrvjOdND25s7lVJJ1Js')

if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit(1)

CHANNEL_USERNAME = "@ZOBME_team"
CHANNEL_INVITE_LINK = "https://t.me/ZOMBE_Team"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
main_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="üéÆ –°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã", callback_data="team"),
            InlineKeyboardButton(text="üèÜ TI 2026", callback_data="ti_info")
        ],
        [
            InlineKeyboardButton(text="üìπ –ù–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data="content"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
        ],
        [
            InlineKeyboardButton(text="üé• YouTube", url="https://youtube.com/@ZOBME"),
            InlineKeyboardButton(text="üî¥ Twitch", url="https://twitch.tv/ZOBME")
        ],
        [
            InlineKeyboardButton(text="‚ö°Ô∏è TikTok", url="https://tiktok.com/@ZOBME"),
            InlineKeyboardButton(text="üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", url=CHANNEL_INVITE_LINK)
        ]
    ]
)

async def send_welcome_message(chat_id: int, user_name: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    
    welcome_text = f"""
üéÆ <b>–ü–†–ò–í–ï–¢, {user_name}! –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í ZOBME TEAM! üî•</b>

–ú—ã - –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –∫–æ—Ç–æ—Ä–∞—è 8 –ª–µ—Ç –ø–æ–¥—Ä—è–¥ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –Ω–∞ TI, 
–Ω–æ –æ—Ç —ç—Ç–æ–≥–æ —Å—Ç–∞–ª–∞ —Ç–æ–ª—å–∫–æ —Å–∏–ª—å–Ω–µ–µ –¥—É—Ö–æ–º! üí™

<b>–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –Ω–∞—Å –±–æ–ª—å—à–µ!</b>
    """
    
    await bot.send_message(
        chat_id=chat_id,
        text=welcome_text,
        reply_markup=main_keyboard,
        parse_mode=ParseMode.HTML
    )

# ========== –ö–û–ú–ê–ù–î–´ ========== #

@dp.message(CommandStart())
async def start_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = message.from_user
    logger.info(f"üéØ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name}")
    await send_welcome_message(message.chat.id, user.first_name)

@dp.message(Command("help"))
async def help_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = """
üõ† <b>–î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:</b>

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –°–ø—Ä–∞–≤–∫–∞  
/team - –°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã
/ti - –ù–∞—à –ø—É—Ç—å –∫ TI
/content - –ù–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/streams - –°—Ç—Ä–∏–º—ã
    """
    await message.answer(help_text, parse_mode=ParseMode.HTML)

@dp.message(Command("team"))
async def team_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /team"""
    team_text = """
üéÆ <b>ZOBME TEAM - –°–û–°–¢–ê–í –õ–ï–ì–ï–ù–î</b>

‚Ä¢ üî• <b>–ú–∏—à–∞ –•–æ—Ö–ª–æ—Ä–µ–∑</b> - 2 –ø–æ–∑–∏—Ü–∏—è
‚Ä¢ üéØ <b>–°—Çi—Å</b> - 4 –ø–æ–∑–∏—Ü–∏—è  
‚Ä¢ üíé <b>DOMINIC</b> - 5 –ø–æ–∑–∏—Ü–∏—è
‚Ä¢ üåü <b>–í–µ–ª–∏—á–∞–π—à–∏–π –ú–∞–∫—Å–æ—Å</b> - 3 –ø–æ–∑–∏—Ü–∏—è
‚Ä¢ ‚ùì <b>–îi–º–∞</b> - 1 –ø–æ–∑–∏—Ü–∏—è (–Ω–æ —ç—Ç–æ –Ω–µ —Ç–æ—á–Ω–æ)
    """
    await message.answer(team_text, parse_mode=ParseMode.HTML)

@dp.message(Command("ti"))
async def ti_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /ti"""
    ti_text = """
üèÜ <b>TI 2026 - –ù–ê–®–ê –¶–ï–õ–¨!</b>

8 –ª–µ—Ç –ø—Ä–æ–±—É–µ–º, –≤ 2026 —Ç–æ—á–Ω–æ –ø—Ä–æ–π–¥–µ–º! üí™
    """
    await message.answer(ti_text, parse_mode=ParseMode.HTML)

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö ========== #

@dp.callback_query(F.data == "main_menu")
async def main_menu_handler(callback: CallbackQuery):
    await callback.message.edit_text(
        text="üéÆ <b>–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ZOBME TEAM</b>\n\n–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=main_keyboard,
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

@dp.callback_query(F.data == "team")
async def team_handler(callback: CallbackQuery):
    team_text = "üéÆ <b>–°–æ—Å—Ç–∞–≤ ZOBME Team</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π /team –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    )
    await callback.message.edit_text(text=team_text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    await callback.answer()

@dp.callback_query(F.data == "ti_info")
async def ti_handler(callback: CallbackQuery):
    ti_text = "üèÜ <b>TI 2026 - –ù–ê–®–ê –¶–ï–õ–¨!</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π /ti –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π!"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    )
    await callback.message.edit_text(text=ti_text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    await callback.answer()

@dp.callback_query(F.data == "content")
async def content_handler(callback: CallbackQuery):
    content_text = "üìπ <b>–ù–ê–® –ö–û–ù–¢–ï–ù–¢</b>\n\n–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –≤—Å–µ –Ω–∞—à–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã!"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üé• YouTube", url="https://youtube.com/@ZOBME"),
                InlineKeyboardButton(text="üî¥ Twitch", url="https://twitch.tv/ZOBME")
            ],
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    )
    await callback.message.edit_text(text=content_text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    await callback.answer()

@dp.callback_query(F.data == "stats")
async def stats_handler(callback: CallbackQuery):
    stats_text = "üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n\n47% –≤–∏–Ω—Ä–µ–π—Ç –∏ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ! üìà"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    )
    await callback.message.edit_text(text=stats_text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    await callback.answer()

async def main():
    logger.info("üöÄ ZOBME Bot –∑–∞–ø—É—â–µ–Ω –Ω–∞ Timeweb!")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        bot_info = await bot.get_me()
        logger.info(f"‚úÖ –ë–æ—Ç @{bot_info.username} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())